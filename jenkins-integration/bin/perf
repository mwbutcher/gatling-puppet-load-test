#!/usr/bin/env ruby

require 'json'

module Puppet
  module Performance
    class Tester
      PE_LOCATION = {
        '3.4' => 'http://neptune.delivery.puppetlabs.net/3.4/ci-ready',
        '3.3' => 'http://neptune.delivery.puppetlabs.net/archives/releases/3.3.0',
        '3.2' => 'http://neptune.delivery.puppetlabs.net/archives/releases/3.2.3',
        '3.1' => 'http://neptune.delivery.puppetlabs.net/archives/releases/3.1.3',
        '3.0' => 'http://neptune.delivery.puppetlabs.net/archives/releases/3.0.1',
        '2.8' => 'http://neptune.delivery.puppetlabs.net/archives/releases/2.8.6'
      }

      SUPPORTED_STEPS = {
        "install"           => :install,
        "simulate"          => :simulate,
        "cobbler-provision" => :cobbler_provision
      }

      def initialize(settings)
        @settings = settings
      end

      def perform(step, arguments = nil)
        if !SUPPORTED_STEPS.keys.include? step
          raise "Unrecognized step \"#{step}\".\nSupported steps are: #{SUPPORTED_STEPS.keys}"
        end

        if arguments.nil?
          send(SUPPORTED_STEPS[step])
        else
          send(SUPPORTED_STEPS[step], arguments)
        end
      end

      def cobbler_provision()
        raise 'Puppet Master ipaddress is required for cobbler provisioning' unless @settings[:master_ip]
        raise 'Server Target is required for cobbler provisioning' unless @settings[:target]
        run 'cobbler_provision.sh', @settings[:master_ip], @settings[:ssh_keyfile], @settings[:target]
        if @settings[:agent_ip]
          run 'cobbler_provision.sh', @settings[:agent_ip], @settings[:ssh_keyfile], @settings[:agent_hostname]
        end
      end

      def install(version)
        ENV['pe_dist_dir'] = PE_LOCATION[version]

        run 'pe_uninstall.sh', @settings[:puppet_master], @settings[:ssh_keyfile]
        write_systest_config_file()
        run "pe_install.sh", @settings[:systest_config], @settings[:ssh_keyfile]
      end

      def simulate(arguments)
        sim_id = arguments["id"]
        scenario = arguments["scenario"]
        filename = write_scenario_to_file(sim_id, scenario)

        unless ENV["ERG_MODE"] # Don't run restart or classify during ERG testing
          run "pe_restart.sh", @settings[:systest_config], @settings[:ssh_keyfile]
         # run "pe_classify.sh", filename, @settings[:systest_config], @settings[:ssh_keyfile], sim_id
        end

        # Grab certs from the master and use them for 4096-bit crypto connections
        setup_encryption arguments unless ENV['USE_OLD_CRYPTO']

        # Rename the configuration file if old 1024-bit encryption is needed
        if ENV['USE_OLD_CRYPTO']
          cmd = %Q{mv ../simulation-runner/config/gatling.conf ../simulation-runner/config/gatling.conf.bak}
          puts "Executing: " + cmd
          puts %x{#{cmd}}
        end

        if @settings[:agent_ip]
          workspace = ENV['PWD'].chomp("/jenkins-integration").rpartition("/")[2]
          jdk_version = "java-1.7.0-openjdk"

          # "yum install java-1.7.0-openjdk" on driver
          puts "Installing OpenJDK on the driver node"
          cmd = %Q{ssh -i #{@settings[:ssh_keyfile]} root@#{@settings[:agent_ip]} "yum install -y #{jdk_version}"}
          puts "Executing: " + cmd
          puts %x{#{cmd}}

          # copy the entire working directory to the driver node
          cmd = %Q{scp -i #{@settings[:ssh_keyfile]} -rp ~/workspace/#{workspace} root@#{@settings[:agent_ip]}:}
          puts "Copying over the gatling working directory to the driver node"
          puts "Executing: " + cmd
          puts %x{#{cmd}}

          # copy the sbt-launch.jar file to the driver node
          cmd = %Q{scp -i #{@settings[:ssh_keyfile]} #{@settings[:sbtpath]} root@#{@settings[:agent_ip]}:}
          puts "Copying over the sbt-launch.jar file to the driver node"
          puts "Executing: " + cmd
          puts %x{#{cmd}}

          # copy the ~/.ivy2 directory due to repository.excilys.com being down
          # scp -r .ivy2/ root@10.16.150.21:
          #cmd = %Q{scp -i #{@settings[:ssh_keyfile]} -r ~/.ivy2/ root@#{@settings[:agent_ip]}:}
          #puts "Copying over the ~/.ivy2 directory to the driver node (QENG-1164)"
          #puts "Executing: " + cmd
          #puts %x{#{cmd}}

          # launch the sbt.sh script on the driver node
          puts "Launching gatling on the driver node"
          run "run_sbt.sh", filename, @settings[:systest_config], @settings[:ssh_keyfile], sim_id, workspace

          # Copy the "results" directory over to the jenkins slave for the plugins to process
          puts "Copying results from the driver node back to the Jenkins slave"
          cmd = 'rm -rf ../simulation-runner/results/'
          puts "Executing: " + cmd
          puts %x{#{cmd}}
          cmd =  %Q{scp -i #{@settings[:ssh_keyfile]} -rp root@#{@settings[:agent_ip]}:#{workspace}/simulation-runner/results/ ../simulation-runner/}
          puts "Executing: " + cmd
          puts %x{#{cmd}}
        else
          run 'sbt.sh', sim_id, @settings[:puppet_master], filename, @settings[:sbtpath]
        end

        # Rename the configuration file if old 1024-bit encryption was used
        if ENV['USE_OLD_CRYPTO']
          cmd = %Q{mv ../simulation-runner/config/gatling.conf.bak ../simulation-runner/config/gatling.conf}
          puts "Executing: " + cmd
          puts %x{#{cmd}}
        end
      end

      def setup_encryption(arguments)
        puts arguments.to_s
        master_ssl_dir = "/etc/puppetlabs/puppet/ssl"
        config_dir = "../simulation-runner/config"
        jks_dir = config_dir + "/ssl"
        new_jks_dir = config_dir + "/tmp/jks-gen/ssl"
        relative_pems_dir = config_dir + "/ssl/pems"
        working_dir = ENV['PWD']
        gen_jks_dir = config_dir
        gen_jks_files = "./generate-jks-files.sh"
        pem_name = @settings[:master_hostname] + ".pem"

        # Copy the ssl directory from the master
        cmd = %Q{scp -i #{@settings[:ssh_keyfile]} -rp root@#{@settings[:master_ip]}:#{master_ssl_dir} #{relative_pems_dir}}
        puts "Executing: " + cmd
        puts %x{#{cmd}}

        # Look inside and copy the .pem files to something "generate-jks-files.sh" expects
        cmd = %Q{find ../simulation-runner/config/ssl/pems/ssl/ -name #{pem_name}}
        puts "Executing: " + cmd
        target_pems = %x{#{cmd}}
        target_pems.split("\n").each do |pem|
          cmd = %Q{cp #{pem} #{pem.chomp(pem_name)}puppet-agent.pem}
          puts "Executing: " + cmd
          puts %x{#{cmd}}
          cmd = %Q{cp #{pem} #{pem.chomp(pem_name)}puppet-master.pem}
          puts "Executing: " + cmd
          puts %x{#{cmd}}
        end

        # Run "generate-jks-files.sh"
        Dir.chdir(gen_jks_dir)
        cmd = gen_jks_files + " ssl"
        puts "Executing: " + cmd
        puts %x{#{cmd}}
        Dir.chdir(working_dir)

        # Copy new jks files where they need to go and then cleanup the new_jks_dir
        cmd = %Q{cp #{new_jks_dir}/gatling-keystore-ssl.jks #{jks_dir}/gatling-keystore-4096.jks}
        puts "Executing: " + cmd
        puts %x{#{cmd}}

        cmd = %Q{cp #{new_jks_dir}/gatling-truststore-ssl.jks #{jks_dir}/gatling-truststore-4096.jks}
        puts "Executing: " + cmd
        puts %x{#{cmd}}

        cmd = %Q{rm -rf #{new_jks_dir}}
        puts "Executing: " + cmd
        puts %x{#{cmd}}
      end

      private
      def run(script, *args)
        args = args.join '" "'
        if (args.length > 0)
          args = '"' + args + '"'
        end
        puts "Running '#{script} #{args}'"

        script_file = "scripts/#{script}"

        successful = system "bash -x #{script_file} #{args}"
        raise "Error running #{script}" unless successful
      end

      def write_systest_config_file()
        # Dominic M: feeling extra dirty - temporary until job is moved to jenkins-enterprise
        ip = (@settings[:master_ip].nil?) ? nil : "ip: #{@settings[:master_ip]}"
        if @settings[:agent_ip]
          config = <<-EOS
            HOSTS:
              #{@settings[:master_hostname]}:
                roles:
                  - master
                  - agent
                  - dashboard
                  - database
                platform: el-6-x86_64
                #{ip}
              #{@settings[:agent_hostname]}:
                roles:
                  - gatling
                platform: el-6-x86_64
                ip: #{@settings[:agent_ip]}
            CONFIG:
              consoleport: 443
          EOS
        else
          config = <<-EOS
            HOSTS:
              #{@settings[:master_hostname]}:
                roles:
                  - master
                  - agent
                  - dashboard
                  - database
                platform: el-6-x86_64
                #{ip}
            CONFIG:
              consoleport: 443
          EOS
        end

        File.open(@settings[:systest_config], 'w') { |file| file.write(config) }
      end

      def write_scenario_to_file(id, scenario)
        filename = "#{id}.json"
        scenario_file = File.join(ENV['PWD'], "../simulation-runner/config/scenarios/#{filename}")
        File.open(scenario_file, 'w') { |file| file.write(JSON.pretty_generate(scenario)) }
        return filename
      end
    end

    class Runner
      def extract_settings(json)
        settings = {}

        master_info = json["master"]
        agent_info = json["agent"]
        raise 'Master information is required' unless master_info
        if master_info.is_a? String
          settings[:master_hostname] = master_info
          settings[:puppet_master] = master_info
          settings[:master_ip] = nil
          settings[:target] = nil
          settings[:agent_hostname] = nil
          settings[:agent_ip] = nil
        elsif master_info.is_a? Hash
          settings[:master_hostname] = master_info["hostname"]
          settings[:master_ip] = master_info["ip"]
          settings[:puppet_master] = master_info["ip"]
          settings[:target] = master_info["target"]
          if !agent_info.nil?
            settings[:agent_hostname] = agent_info["hostname"] || false
            settings[:agent_ip] = agent_info["ip"] || false
          end
        end

        # Settings from the json configuration file can be overriden by environment variables
        if ENV["MASTER_HOSTNAME"]
          settings[:master_hostname] = ENV["MASTER_HOSTNAME"]
        end
        if ENV["MASTER_IP"]
          settings[:master_ip] = ENV["MASTER_IP"]
          settings[:puppet_master] = ENV["MASTER_IP"]
        end
        if ENV["MASTER_TARGET"]
          settings[:target] = ENV["MASTER_TARGET"]
        end

        # Default value taken from puppet-acceptance/options_parsing.rb
        settings[:ssh_keyfile] = json["ssh-keyfile"] || "~/.ssh/id_rsa"

        settings[:systest_config] = File.join(ENV['PWD'], "gatling-perf-master.cfg")

        settings[:sbtpath] = json["sbtpath"] || "/var/lib/jenkins/sbt-launch.jar"

        return settings
      end

      def remove_comments(config_path)
        new_json = ""
        File.open(config_path, 'r') do |infile|
          while (line = infile.gets)
            unless line.strip.start_with?('#') or line.strip.start_with?('//')
              new_json << line
            end
          end
        end
        new_json
      end

      def run_steps(config_path)
        json = JSON.parse(remove_comments(config_path))
        settings = extract_settings(json)
        steps = json["steps"]
        raise 'Job "steps" are required' unless steps

        tester = Tester.new(settings)

        steps.each do |step|
          if step.is_a? String
            tester.perform(step)
          elsif step.is_a? Hash
            tester.perform(step.first[0], step.first[1])
          end
        end
      end

      def display_help_and_exit
        progname = File.basename( $0 )
        puts "usage:  #{progname} path/to/config.json"
        exit 1
      end

      def run(args = ARGV)
        if args.length > 1
          puts "Too many arguments"
          display_help_and_exit
        end

        case args.first
        when '-h', '--help', nil
          display_help_and_exit

        else
          path = File.join(ENV['PWD'], args.first)
          if File.exists?( path )
            run_steps(path)

          else
            display_help_and_exit

          end
        end
      end
    end
  end
end

Puppet::Performance::Runner.new.run( ARGV )
